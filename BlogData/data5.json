{
    "id":"5",
    "title":"Advance Guide of React ",
    "content":"React adheres to the declarative programming paradigm. Developers design views for each state of an application, and React updates and renders components when data changes. This is in contrast with imperative programming.[8] Components React code is made of entities called components. These components are reusable and must be formed in the SRC folder following the Pascal Case as its naming conversion (capitalize camelCase). Components can be rendered to a particular element in the DOM using the React DOM library. When rendering a component, one can pass the values between components through props:[9] import React from react; import Tool from  Tool; const Example = () => { return ( <> <div className=app> <Tool name=Ateev /> </div> </> ); }; export default Example; In the above example, the name prop with the value Ateev has been passed from the Example component to the Tool Component. The two primary ways of declaring components in React are through function components and class-based components. Functional components Function components are declared with a function that then returns some JSX. const Greeter = () => <div>Hello World</div>; Class-based components Class-based components are declared using ES6 classes. class ParentComponent extends React.Component { state = { color: 'green' }; render() { return ( <ChildComponent color={this.state.color} /> ); } } Where class components are all about the use of classes and the lifecycle methods, functional components have hooks to deal with the state managements and other problems which we have face while writing code in React. Virtual DOM Another notable feature is the use of a virtual Document Object Model, or virtual DOM. React creates an in-memory data-structure cache, computes the resulting differences, and then updates the browser's displayed DOM efficiently.[10] This process is called reconciliation. This allows the programmer to write code as if the entire page is rendered on each change, while the React libraries only render subcomponents that actually change. This selective rendering provides a major performance boost.[11] It saves the effort of recalculating the CSS style, layout for the page and rendering for the entire page.[11] Lifecycle methods Lifecycle methods for class-based components use a form of hooking that allows the execution of code at set points during a component's lifetime. shouldComponentUpdate allows the developer to prevent unnecessary re-rendering of a component by returning false if a render is not required. componentDidMount is called once the component has mounted (the component has been created in the user interface, often by associating it with a DOM node). This is commonly used to trigger data loading from a remote source via an API. componentWillUnmount is called immediately before the component is torn down or unmounted. This is commonly used to clear resource-demanding dependencies to the component that will not simply be removed with the unmounting of the component (e.g., removing any setInterval() instances that are related to the component, or an eventListener set on the document because of the presence of the component) render is the most important lifecycle method and the only required one in any component. It is usually called every time the component's state is updated, which should be reflected in the user interface. JSX Main article: JSX JSX, or JavaScript Syntax Extension , is an extension to the JavaScript language syntax.[12] Similar in appearance to HTML, JSX provides a way to structure component rendering using syntax familiar to many developers. React components are typically written using JSX, although they do not have to be (components may also be written in pure JavaScript). JSX is similar to another extension syntax created by Facebook for PHP called XHP. An example of JSX code: class App extends React.Component { render() { return ( <div> <p>Header</p> <p>Content</p> <p>Footer</p> </div> ); } } Architecture beyond HTML The basic architecture of React applies beyond rendering HTML in the browser. For example, Facebook has dynamic charts that render to <canvas> tags,[13] and Netflix and PayPal use universal loading to render identical HTML on both the server and client.[14][15] React hooks Hooks are functions that let developers hook into React state and lifecycle features from function components.[16] Hooks do not work inside classes â€” they let you use React without classes.[17] React provides a few built-in hooks like useState,[18] useContext, useReducer , useMemo and useEffect.[19] Others are documented in the Hooks API Reference.[20] useState and useEffect, which are the most commonly used, are for controlling state and side effects respectively. Rules of hooks There are rules of hooks[21] which describe the characteristic code pattern that hooks rely on. It is the modern way to handle state with React. Hooks should only be called at the top level (not inside loops or if statements). Hooks should only be called from React function components and custom hooks, not normal functions or class components. Although these rules can't be enforced at runtime, code analysis tools such as linters can be configured to detect many mistakes during development. The rules apply to both usage of hooks and the implementation of custom hooks,[22] which may call other hooks.",
    "slug":"data5"
}